{"name": "test_delete", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (::1), port 5432 failed: FATAL:  password authentication failed for user \"postgres\"\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x000001B53A811E50>, engine = Engine(postgresql://postgres:***@localhost:5432/mydatabase), connection = None, _has_events = None\n_allow_revalidate = True, _allow_autobegin = True\n\n    def __init__(\n        self,\n        engine: Engine,\n        connection: Optional[PoolProxiedConnection] = None,\n        _has_events: Optional[bool] = None,\n        _allow_revalidate: bool = True,\n        _allow_autobegin: bool = True,\n    ):\n        \"\"\"Construct a new Connection.\"\"\"\n        self.engine = engine\n        self.dialect = dialect = engine.dialect\n    \n        if connection is None:\n            try:\n>               self._dbapi_connection = engine.raw_connection()\n\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3302: in raw_connection\n    return self.pool.connect()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:449: in connect\n    return _ConnectionFairy._checkout(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1263: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:712: in checkout\n    rec = pool._do_get()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:179: in _do_get\n    with util.safe_reraise():\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    return self._create_connection()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:390: in _create_connection\n    return _ConnectionRecord(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:674: in __init__\n    self.__connect()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:900: in __connect\n    with util.safe_reraise():\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:896: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:643: in connect\n    return dialect.connect(*cargs, **cparams)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:621: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = 'host=localhost dbname=mydatabase user=postgres password=2335108 port=5432', connection_factory = None, cursor_factory = None\nkwargs = {'dbname': 'mydatabase', 'host': 'localhost', 'password': '2335108', 'port': 5432, ...}, kwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\nE       psycopg2.OperationalError: connection to server at \"localhost\" (::1), port 5432 failed: FATAL:  password authentication failed for user \"postgres\"\n\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\psycopg2\\__init__.py:122: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\n    def test_delete():\n        db = create_engine(db_connection_string)\n>       with db.connect() as connection:\n\ntest_database.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3278: in connect\n    return self._connection_cls(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:148: in __init__\n    Connection._handle_dbapi_exception_noconnection(\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2442: in _handle_dbapi_exception_noconnection\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:146: in __init__\n    self._dbapi_connection = engine.raw_connection()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3302: in raw_connection\n    return self.pool.connect()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:449: in connect\n    return _ConnectionFairy._checkout(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:1263: in _checkout\n    fairy = _ConnectionRecord.checkout(pool)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:712: in checkout\n    rec = pool._do_get()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:179: in _do_get\n    with util.safe_reraise():\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\impl.py:177: in _do_get\n    return self._create_connection()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:390: in _create_connection\n    return _ConnectionRecord(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:674: in __init__\n    self.__connect()\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:900: in __connect\n    with util.safe_reraise():\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\pool\\base.py:896: in __connect\n    self.dbapi_connection = connection = pool._invoke_creator(self)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\create.py:643: in connect\n    return dialect.connect(*cargs, **cparams)\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:621: in connect\n    return self.loaded_dbapi.connect(*cargs, **cparams)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndsn = 'host=localhost dbname=mydatabase user=postgres password=2335108 port=5432', connection_factory = None, cursor_factory = None\nkwargs = {'dbname': 'mydatabase', 'host': 'localhost', 'password': '2335108', 'port': 5432, ...}, kwasync = {}\n\n    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n        \"\"\"\n        Create a new database connection.\n    \n        The connection parameters can be specified as a string:\n    \n            conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n    \n        or using a set of keyword arguments:\n    \n            conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n    \n        Or as a mix of both. The basic connection parameters are:\n    \n        - *dbname*: the database name\n        - *database*: the database name (only as keyword argument)\n        - *user*: user name used to authenticate\n        - *password*: password used to authenticate\n        - *host*: database host address (defaults to UNIX socket if not provided)\n        - *port*: connection port number (defaults to 5432 if not provided)\n    \n        Using the *connection_factory* parameter a different class or connections\n        factory can be specified. It should be a callable object taking a dsn\n        argument.\n    \n        Using the *cursor_factory* parameter, a new default cursor factory will be\n        used by cursor().\n    \n        Using *async*=True an asynchronous connection will be created. *async_* is\n        a valid alias (for Python versions where ``async`` is a keyword).\n    \n        Any other keyword parameter will be passed to the underlying client\n        library: the list of supported parameters depends on the library version.\n    \n        \"\"\"\n        kwasync = {}\n        if 'async' in kwargs:\n            kwasync['async'] = kwargs.pop('async')\n        if 'async_' in kwargs:\n            kwasync['async_'] = kwargs.pop('async_')\n    \n        dsn = _ext.make_dsn(dsn, **kwargs)\n>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\nE       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (::1), port 5432 failed: FATAL:  password authentication failed for user \"postgres\"\nE       \nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\nC:\\Users\\Tatyana\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\psycopg2\\__init__.py:122: OperationalError"}, "start": 1733177325296, "stop": 1733177325333, "uuid": "53a66be5-29fd-4abe-91c4-54109bd0815e", "historyId": "ac03844149cc51f614b2d9230ee8f6a6", "testCaseId": "ac03844149cc51f614b2d9230ee8f6a6", "fullName": "test_database#test_delete", "labels": [{"name": "suite", "value": "test_database"}, {"name": "host", "value": "LAPTOP-KRFIDVMG"}, {"name": "thread", "value": "25392-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_database"}]}